import sys
from PyQt5.QtWidgets import (QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, 
                             QLabel, QLineEdit, QPushButton, QTextEdit, QCheckBox, 
                             QSlider, QProgressBar, QMessageBox, QSplitter)
from PyQt5.QtCore import Qt, QThread, pyqtSignal
from PyQt5.QtGui import QTextCursor
import time
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import re
import random
import os

class ScraperThread(QThread):
    update_signal = pyqtSignal(str)
    result_signal = pyqtSignal(str)
    progress_signal = pyqtSignal(int, int, str)
    finished_signal = pyqtSignal(bool, str)

    def __init__(self, hashtag, scroll_count, headless_mode):
        super().__init__()
        self.hashtag = hashtag
        self.scroll_count = scroll_count
        self.headless_mode = headless_mode
        self._is_running = True
        self.driver = None

    def run(self):
        try:
            self.log_message("üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ Instagram...")
            
            self.account_manager = AccountManager(self.log_message)
            self.state = ScraperState(self.hashtag, self.log_message)
            
            options = webdriver.ChromeOptions()
            options.add_argument("--disable-notifications")
            options.add_argument("--lang=en-US") 
            if self.headless_mode:
                options.add_argument("--headless=new")
                self.log_message("üëª –†–µ–∂–∏–º –±–µ–∑ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–∞")
            
            self.driver = webdriver.Chrome(options=options)
            
            try:
                username, password = self.account_manager.get_current_account()
                if not self.login_to_instagram(username, password):
                    self.finished_signal.emit(False, "‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ –∞–∫–∫–∞—É–Ω—Ç")
                    return
                
                if not self.state.post_urls:
                    self.log_message("üåê –ù–∞—á–∞–ª–æ —Å–±–æ—Ä–∞ –ø–æ —Ö—ç—à—Ç–µ–≥—É...")
                    if not self.scrape_hashtag_posts():
                        self.finished_signal.emit(False, "‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –ø–æ —Ö—ç—à—Ç–µ–≥—É")
                        return
                    self.state.save_state()
                
                self.log_message(f"üîç –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ URL –ø—Ä–æ—Ñ–∏–ª–µ–π –∏–∑ –ø–æ—Å—Ç–æ–≤ ({self.state.processed_posts}/{len(self.state.post_urls)} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ)...")
                for i in range(self.state.processed_posts, len(self.state.post_urls)):
                    if not self._is_running:
                        self.finished_signal.emit(False, "‚èπÔ∏è –ü–∞—Ä—Å–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                        return
                    
                    post_url = self.state.post_urls[i]
                    profile_url = self.extract_profile_url(post_url)
                    if profile_url:
                        self.state.profile_urls.append(profile_url)
                    self.state.processed_posts = i + 1
                    self.state.save_state()
                    self.progress_signal.emit(i+1, len(self.state.post_urls), "posts")
                    
                    self.log_message(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω –ø–æ—Å—Ç {i+1}/{len(self.state.post_urls)} (–ê–∫–∫–∞—É–Ω—Ç {self.account_manager.current_account_index + 1})")
                    
                    if self.account_manager.increment_scrape_count():
                        self.log_message("üîÑ –°–º–µ–Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ—Å–ª–µ 10 –∑–∞–ø—Ä–æ—Å–æ–≤...")
                        if self.perform_logout():
                            username, password = self.account_manager.rotate_account()
                            if not self.login_to_instagram(username, password):
                                self.log_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–º–µ–Ω–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç - –≤—ã—Ö–æ–¥")
                                self.finished_signal.emit(False, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–º–µ–Ω–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç")
                                return
                
                if not self.state.profile_urls:
                    self.finished_signal.emit(False, "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ URL –ø—Ä–æ—Ñ–∏–ª–µ–π")
                    return
                
                self.log_message(f"üì° –°–±–æ—Ä Telegram URL –∏–∑ –ø—Ä–æ—Ñ–∏–ª–µ–π ({self.state.processed_profiles}/{len(self.state.profile_urls)} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ)...")
                for i in range(self.state.processed_profiles, len(self.state.profile_urls)):
                    if not self._is_running:
                        self.finished_signal.emit(False, "‚èπÔ∏è –ü–∞—Ä—Å–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                        return
                    
                    profile_url = self.state.profile_urls[i]
                    self.log_message(f"üîé –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è {i+1}/{len(self.state.profile_urls)} (–ê–∫–∫–∞—É–Ω—Ç {self.account_manager.current_account_index + 1})")
                    telegram_urls = self.scrape_telegram_url(profile_url)
                    for url in telegram_urls:
                        self.result_signal.emit(url)
                    self.state.telegram_urls.update(telegram_urls)
                    self.state.processed_profiles = i + 1
                    self.state.save_state()
                    self.progress_signal.emit(i+1, len(self.state.profile_urls), "profiles")
                    
                    if self.account_manager.increment_scrape_count():
                        self.log_message("üîÑ –°–º–µ–Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ—Å–ª–µ 10 –∑–∞–ø—Ä–æ—Å–æ–≤...")
                        if self.perform_logout():
                            username, password = self.account_manager.rotate_account()
                            if not self.login_to_instagram(username, password):
                                self.log_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–º–µ–Ω–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç - –≤—ã—Ö–æ–¥")
                                self.finished_signal.emit(False, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–º–µ–Ω–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç")
                                return
                
                with open(f"instagram_{self.hashtag}_profiles.txt", 'w', encoding='utf-8') as f:
                    for url in sorted(self.state.profile_urls):
                        f.write(url + '\n')
                
                with open(f"instagram_{self.hashtag}_telegram.txt", 'w', encoding='utf-8') as f:
                    for url in sorted(self.state.telegram_urls):
                        f.write(url + '\n')
                
                success_message = f"üéâ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:\n- {len(self.state.profile_urls)} URL –ø—Ä–æ—Ñ–∏–ª–µ–π\n- {len(self.state.telegram_urls)} Telegram URL"
                self.finished_signal.emit(True, success_message)
                
            except Exception as e:
                self.finished_signal.emit(False, f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
            finally:
                if self.driver:
                    self.driver.quit()
                self.state.save_state()
                
        except Exception as e:
            self.finished_signal.emit(False, f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {str(e)}")

    def log_message(self, message):
        """Helper method to emit log messages"""
        self.update_signal.emit(message)

    def stop(self):
        self._is_running = False
        self.log_message("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ")
        if self.driver:
            self.driver.quit()

    def verify_logout(self):
        try:
            self.driver.get("https://www.instagram.com/accounts/login/")
            WebDriverWait(self.driver, 10).until(
                EC.presence_of_element_located((By.NAME, "password"))
            )
            return True
        except:
            return False

    def perform_logout(self):
        try:
            self.driver.delete_all_cookies()
            time.sleep(2)
            
            self.driver.get("https://www.instagram.com/accounts/logout/")
            time.sleep(3)
            
            if self.verify_logout():
                self.log_message("‚úÖ –í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                return True
            
            self.log_message("‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã—Ö–æ–¥–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å - –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥")
            self.driver.get("https://www.instagram.com/")
            time.sleep(2)
            try:
                menu = self.driver.find_element(By.XPATH, "//span[contains(@class, '_aa8h')]")
                menu.click()
                time.sleep(1)
                logout_btn = self.driver.find_element(By.XPATH, "//div[contains(text(), 'Log Out')]")
                logout_btn.click()
                time.sleep(3)
                return self.verify_logout()
            except:
                return False
                
        except Exception as e:
            self.log_message(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ: {str(e)}")
            return False

    def is_rate_limited(self):
        try:
            if "HTTP ERROR 429" in self.driver.page_source or "Please wait a few minutes" in self.driver.page_source:
                self.log_message("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤!")
                return True
            return False
        except:
            return False

    def safe_get(self, url):
        try:
            self.driver.get(url)
            time.sleep(random.uniform(2, 5))
            
            if self.is_rate_limited():
                self.log_message("‚ö†Ô∏è –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤! –û–∂–∏–¥–∞–Ω–∏–µ 60 —Å–µ–∫—É–Ω–¥ –∏ —Å–º–µ–Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–∞...")
                time.sleep(60)
                
                if self.is_rate_limited():
                    self.log_message("‚ö†Ô∏è –í—Å–µ –µ—â–µ –ª–∏–º–∏—Ç –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è - –≤—ã–ø–æ–ª–Ω—è–µ–º –≤—ã—Ö–æ–¥")
                    if self.perform_logout():
                        username, password = self.account_manager.rotate_account()
                        if not self.login_to_instagram(username, password):
                            self.log_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–º–µ–Ω–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç - –≤—ã—Ö–æ–¥")
                            return False
                        return self.safe_get(url)
                    else:
                        self.log_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–π—Ç–∏ - –≤—ã—Ö–æ–¥")
                        return False
                    
            return True
        except Exception as e:
            self.log_message(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {url}: {str(e)}")
            return False

    def login_to_instagram(self, username, password, max_retries=3):
        retry_count = 0
        while retry_count < max_retries:
            try:
                if not self.safe_get("https://www.instagram.com/accounts/login/"):
                    return False
                    
                WebDriverWait(self.driver, 10).until(
                    EC.presence_of_element_located((By.NAME, "username"))
                )
                
                # Check for cookie consent button (only on first login attempt)
                if retry_count == 0:
                    try:
                        cookie_buttons = self.driver.find_elements(By.XPATH, "//button[contains(., 'Allow all cookies') or contains(., 'Accept all cookies')]")
                        for btn in cookie_buttons:
                            if btn.is_displayed():
                                btn.click()
                                self.log_message("üç™ –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Å–æ–≥–ª–∞—Å–∏—è —Å –∫—É–∫–∞–º–∏")
                                time.sleep(2)
                                break
                    except Exception as e:
                        self.log_message(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ —Å –∫—É–∫–∞–º–∏: {str(e)}")
                
                self.driver.find_element(By.NAME, "username").clear()
                self.driver.find_element(By.NAME, "username").send_keys(username)
                self.driver.find_element(By.NAME, "password").clear()
                self.driver.find_element(By.NAME, "password").send_keys(password)
                
                login_button = self.driver.find_element(By.XPATH, "//button[@type='submit']")
                login_button.click()
                time.sleep(random.uniform(3, 7))
                
                for popup_text in ["Not Now", "Save Info", "Allow"]:
                    try:
                        WebDriverWait(self.driver, 5).until(
                            EC.presence_of_element_located((By.XPATH, f"//button[contains(text(), '{popup_text}')]"))
                        ).click()
                        time.sleep(random.uniform(1, 3))
                    except:
                        pass
                
                try:
                    WebDriverWait(self.driver, 5).until(
                        EC.presence_of_element_located((By.NAME, "password"))
                    )
                    self.log_message("üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å - –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞...")
                    retry_count += 1
                    time.sleep(random.uniform(5, 10))
                    continue
                except:
                    self.log_message(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –¥–ª—è {username}")
                    return True
                    
            except Exception as e:
                self.log_message(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {str(e)}")
                retry_count += 1
                time.sleep(random.uniform(5, 15))
        
        self.log_message(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫")
        return False

    def scrape_hashtag_posts(self):
        try:
            if not self.safe_get(f"https://www.instagram.com/explore/tags/{self.hashtag}/"):
                return False
                
            time.sleep(random.uniform(3, 6))
            
            last_height = self.driver.execute_script("return document.body.scrollHeight")
            
            for _ in range(self.scroll_count):
                if not self._is_running:
                    return False
                    
                self.driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
                self.log_message(f"üîÑ –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ ({self.account_manager.scrapes_count + 1}/10) —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º {self.account_manager.current_account_index + 1}")
                
                time.sleep(random.uniform(5, 8))
                
                new_height = self.driver.execute_script("return document.body.scrollHeight")
                if new_height == last_height:
                    self.log_message("üîö –î–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ–Ω–µ—Ü –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
                    break
                last_height = new_height
                
                links = self.driver.find_elements(By.XPATH, "//a[contains(@href, '/p/')]")
                for link in links:
                    href = link.get_attribute("href")
                    if href and "/p/" in href:
                        clean_url = href.split('?')[0]
                        if clean_url not in self.state.post_urls:
                            self.state.post_urls.append(clean_url)
                time.sleep(random.uniform(1, 3))
                
                if self.account_manager.increment_scrape_count():
                    self.log_message("üîÑ –°–º–µ–Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ—Å–ª–µ 10 —Å–±–æ—Ä–æ–≤...")
                    if self.perform_logout():
                        username, password = self.account_manager.rotate_account()
                        if not self.login_to_instagram(username, password):
                            self.log_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–º–µ–Ω–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç - –≤—ã—Ö–æ–¥")
                            return False
            
            self.log_message(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(self.state.post_urls)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤")
            return True
        except Exception as e:
            self.log_message(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ —Ö—ç—à—Ç–µ–≥–æ–≤: {str(e)}")
            return False

    def extract_profile_url(self, post_url):
        try:
            if not self.safe_get(post_url):
                return None
                
            time.sleep(random.uniform(2, 4))
            
            
            selectors = [
                "//a[contains(@class, 'x1i10hfl') and contains(@class, 'xjbqb8w') and contains(@class, '_a6hd') and contains(@href, '/')]",
                "//a[contains(@href, '/') and contains(@role, 'link')]",
                "//header//a[contains(@href, '/')]"
            ]
            
            for selector in selectors:
                try:
                    profile_element = WebDriverWait(self.driver, 5).until(
                        EC.presence_of_element_located((By.XPATH, selector))
                    )
                    profile_url = profile_element.get_attribute('href')
                    if profile_url and "/" in profile_url:
                        return profile_url.split('?')[0]
                except:
                    continue
            
            self.log_message(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å URL –ø—Ä–æ—Ñ–∏–ª—è –∏–∑ {post_url} - –≤–æ–∑–º–æ–∂–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ")
            if self.is_rate_limited():
                self.log_message("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è")
                if self.perform_logout():
                    username, password = self.account_manager.rotate_account()
                    if not self.login_to_instagram(username, password):
                        self.log_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–º–µ–Ω–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç - –≤—ã—Ö–æ–¥")
                        return None
                    return self.extract_profile_url(post_url)
            
            return None
        except Exception as e:
            self.log_message(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –∏–∑ {post_url}: {str(e)}")
            return None

    def scrape_telegram_url(self, profile_url):
        try:
            if not self.safe_get(profile_url):
                return set()
                
            time.sleep(random.uniform(3, 6))
            
            found_telegram = set()
            
            telegram_spans = self.driver.find_elements(
                By.XPATH, "//span[contains(text(), 't.me/') or contains(text(), 'telegram.me/')]"
            )
            for span in telegram_spans:
                text = span.text
                if "t.me/" in text:
                    url_part = text.split("t.me/")[1].split()[0]
                    found_telegram.add(f"https://t.me/{url_part}")
                elif "telegram.me/" in text:
                    url_part = text.split("telegram.me/")[1].split()[0]
                    found_telegram.add(f"https://t.me/{url_part}")
                time.sleep(random.uniform(0.5, 1.5))
            
            telegram_links = self.driver.find_elements(
                By.XPATH, "//a[contains(@href, 't.me/') or contains(@href, 'telegram.me/')]"
            )
            for link in telegram_links:
                href = link.get_attribute('href')
                if "t.me/" in href:
                    username = href.split("t.me/")[1].split('/')[0]
                    found_telegram.add(f"https://t.me/{username}")
                elif "telegram.me/" in href:
                    username = href.split("telegram.me/")[1].split('/')[0]
                    found_telegram.add(f"https://t.me/{username}")
                time.sleep(random.uniform(0.3, 1.2))
            
            try:
                bio = self.driver.find_element(By.XPATH, "//div[contains(@class, '_aa_c')]").text
                telegram_pattern = re.compile(r'(?:t\.me/|telegram\.me/)([\w-]+)')
                for match in telegram_pattern.finditer(bio):
                    username = match.group(1)
                    found_telegram.add(f"https://t.me/{username}")
                time.sleep(random.uniform(1, 2))
            except:
                pass
            
            try:
                website = self.driver.find_element(By.XPATH, "//a[contains(@class, '_aa_s')]").get_attribute('href')
                if website and ("t.me/" in website or "telegram.me/" in website):
                    if "t.me/" in website:
                        username = website.split("t.me/")[1].split('/')[0]
                        found_telegram.add(f"https://t.me/{username}")
                    elif "telegram.me/" in website:
                        username = website.split("telegram.me/")[1].split('/')[0]
                        found_telegram.add(f"https://t.me/{username}")
                time.sleep(random.uniform(1, 2))
            except:
                pass
            
            self.log_message(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(found_telegram)} Telegram URL –∏–∑ {profile_url}")
            return found_telegram
        except Exception as e:
            self.log_message(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ Telegram –∏–∑ {profile_url}: {str(e)}")
            return set()

class AccountManager:
    def __init__(self, log_callback=None, credential_file='uid.txt'):
        self.credential_file = credential_file
        self.accounts = []
        self.current_account_index = 0
        self.scrapes_count = 0
        self.log_callback = log_callback
        self.load_accounts()
        
    def load_accounts(self):
        try:
            with open(self.credential_file, 'r', encoding='utf-8') as f:
                for line in f:
                    line = line.strip()
                    if line and ':' in line:
                        username, password = line.split(':', 1)
                        self.accounts.append((username.strip(), password.strip()))
            
            if not self.accounts:
                raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ —Ñ–∞–π–ª–µ —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
                
            if self.log_callback:
                self.log_callback(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        except Exception as e:
            if self.log_callback:
                self.log_callback(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
            raise

    def get_current_account(self):
        return self.accounts[self.current_account_index]

    def rotate_account(self):
        self.current_account_index = (self.current_account_index + 1) % len(self.accounts)
        self.scrapes_count = 0
        if self.log_callback:
            self.log_callback(f"üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç {self.current_account_index + 1}/{len(self.accounts)}")
        return self.get_current_account()

    def increment_scrape_count(self):
        self.scrapes_count += 1
        if self.scrapes_count >= 10:
            return True
        return False

    def get_total_accounts(self):
        return len(self.accounts)

class ScraperState:
    def __init__(self, hashtag, log_callback=None):
        self.state_file = f"scraper_state_{hashtag}.txt"
        self.post_urls = []
        self.profile_urls = []
        self.telegram_urls = set()
        self.processed_posts = 0
        self.processed_profiles = 0
        self.log_callback = log_callback
        self.load_state()

    def load_state(self):
        try:
            if os.path.exists(self.state_file):
                with open(self.state_file, 'r', encoding='utf-8') as f:
                    lines = [line.strip() for line in f.readlines()]
                    if len(lines) >= 3:
                        self.processed_posts = int(lines[0])
                        self.processed_profiles = int(lines[1])
                        self.post_urls = eval(lines[2]) if lines[2] else []
                        self.profile_urls = eval(lines[3]) if len(lines) > 3 and lines[3] else []
                        self.telegram_urls = set(eval(lines[4])) if len(lines) > 4 and lines[4] else set()
                if self.log_callback:
                    self.log_callback(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {self.processed_posts} –ø–æ—Å—Ç–æ–≤, {self.processed_profiles} –ø—Ä–æ—Ñ–∏–ª–µ–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
        except Exception as e:
            if self.log_callback:
                self.log_callback(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {str(e)}")
            self.reset_state()

    def save_state(self):
        try:
            with open(self.state_file, 'w', encoding='utf-8') as f:
                f.write(f"{self.processed_posts}\n")
                f.write(f"{self.processed_profiles}\n")
                f.write(f"{self.post_urls}\n")
                f.write(f"{self.profile_urls}\n")
                f.write(f"{list(self.telegram_urls)}\n")
        except Exception as e:
            if self.log_callback:
                self.log_callback(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {str(e)}")

    def reset_state(self):
        self.post_urls = []
        self.profile_urls = []
        self.telegram_urls = set()
        self.processed_posts = 0
        self.processed_profiles = 0

class InstagramScraperGUI(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Instagram –ü–∞—Ä—Å–µ—Ä")
        self.setGeometry(100, 100, 800, 600)
        
        self.scraper_thread = None
        self.setup_ui()
        
    def setup_ui(self):
        main_widget = QWidget()
        self.setCentralWidget(main_widget)
        
        layout = QVBoxLayout()
        main_widget.setLayout(layout)
        
        # Input fields
        input_layout = QHBoxLayout()
        
        hashtag_layout = QVBoxLayout()
        hashtag_layout.addWidget(QLabel("–•—ç—à—Ç–µ–≥ (–±–µ–∑ #):"))
        self.hashtag_input = QLineEdit()
        hashtag_layout.addWidget(self.hashtag_input)
        
        scroll_layout = QVBoxLayout()
        scroll_layout.addWidget(QLabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–∫—Ä—É—Ç–æ–∫ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 1-20):"))
        self.scroll_slider = QSlider(Qt.Horizontal)
        self.scroll_slider.setRange(1, 20)
        self.scroll_slider.setValue(10)
        scroll_layout.addWidget(self.scroll_slider)
        self.scroll_value_label = QLabel("10")
        scroll_layout.addWidget(self.scroll_value_label)
        
        self.headless_checkbox = QCheckBox("–†–µ–∂–∏–º –±–µ–∑ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–∞")
        self.headless_checkbox.setChecked(False)
        
        input_layout.addLayout(hashtag_layout)
        input_layout.addLayout(scroll_layout)
        input_layout.addWidget(self.headless_checkbox)
        
        layout.addLayout(input_layout)
        
        # Buttons
        button_layout = QHBoxLayout()
        self.start_button = QPushButton("–ù–∞—á–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥")
        self.start_button.clicked.connect(self.start_scraping)
        self.stop_button = QPushButton("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
        self.stop_button.clicked.connect(self.stop_scraping)
        self.stop_button.setEnabled(False)
        
        button_layout.addWidget(self.start_button)
        button_layout.addWidget(self.stop_button)
        layout.addLayout(button_layout)
        
        # Progress bars
        self.post_progress = QProgressBar()
        self.post_progress.setFormat("–ü–æ—Å—Ç—ã: %v/%m")
        layout.addWidget(self.post_progress)
        
        self.profile_progress = QProgressBar()
        self.profile_progress.setFormat("–ü—Ä–æ—Ñ–∏–ª–∏: %v/%m")
        layout.addWidget(self.profile_progress)
        
        # Splitter for logs and results
        splitter = QSplitter(Qt.Horizontal)
        
        # Log output
        self.log_output = QTextEdit()
        self.log_output.setReadOnly(True)
        
        # Results output
        self.results_output = QTextEdit()
        self.results_output.setReadOnly(True)
        self.results_output.setPlaceholderText("–ù–∞–π–¥–µ–Ω–Ω—ã–µ Telegram URL –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∑–¥–µ—Å—å...")
        
        splitter.addWidget(self.log_output)
        splitter.addWidget(self.results_output)
        splitter.setSizes([400, 400])
        
        layout.addWidget(splitter)
        
        # Connect slider value change
        self.scroll_slider.valueChanged.connect(self.update_scroll_value)
        
    def update_scroll_value(self, value):
        self.scroll_value_label.setText(str(value))
        
    def start_scraping(self):
        hashtag = self.hashtag_input.text().strip()
        if not hashtag:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ö—ç—à—Ç–µ–≥")
            return
            
        scroll_count = self.scroll_slider.value()
        headless_mode = self.headless_checkbox.isChecked()
        
        self.log_output.clear()
        self.results_output.clear()
        self.post_progress.setValue(0)
        self.profile_progress.setValue(0)
        
        self.start_button.setEnabled(False)
        self.stop_button.setEnabled(True)
        
        self.scraper_thread = ScraperThread(hashtag, scroll_count, headless_mode)
        self.scraper_thread.update_signal.connect(self.update_log)
        self.scraper_thread.result_signal.connect(self.update_results)
        self.scraper_thread.progress_signal.connect(self.update_progress)
        self.scraper_thread.finished_signal.connect(self.scraping_finished)
        self.scraper_thread.start()
        
    def stop_scraping(self):
        if self.scraper_thread and self.scraper_thread.isRunning():
            self.scraper_thread.stop()
            self.stop_button.setEnabled(False)
            
    def update_log(self, message):
        self.log_output.moveCursor(QTextCursor.End)
        self.log_output.insertPlainText(message + "\n")
        self.log_output.moveCursor(QTextCursor.End)
        
    def update_results(self, url):
        self.results_output.moveCursor(QTextCursor.End)
        self.results_output.insertPlainText(url + "\n")
        self.results_output.moveCursor(QTextCursor.End)
        
    def update_progress(self, current, total, stage):
        if stage == "posts":
            self.post_progress.setMaximum(total)
            self.post_progress.setValue(current)
        elif stage == "profiles":
            self.profile_progress.setMaximum(total)
            self.profile_progress.setValue(current)
            
    def scraping_finished(self, success, message):
        self.start_button.setEnabled(True)
        self.stop_button.setEnabled(False)
        
        self.update_log(message)
        
        if success:
            QMessageBox.information(self, "–£—Å–ø–µ—Ö", message)
        else:
            QMessageBox.warning(self, "–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω", message)
            
        self.scraper_thread = None

if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = InstagramScraperGUI()
    window.show()
    sys.exit(app.exec_())